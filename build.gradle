/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.4.2/samples
 */
apply plugin: 'java'
apply plugin: 'application'

def checkstyleVersion = '9.3'
def junitVersion = '5.10.2'
def mockitoVersion = '5.10.0'
def agronaVersion = '1.20.0'
def hermesGroup = 'com.openfixp.hermes'

ext {
    group = hermesGroup
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

static int getBuildJavaVersion() {
    def buildJavaVersion = System.getenv('BUILD_JAVA_VERSION') ?: JavaVersion.current().getMajorVersion()
    if (buildJavaVersion.indexOf('.') > 0) {
        buildJavaVersion = buildJavaVersion.substring(0, buildJavaVersion.indexOf('.'))
    }
    if (buildJavaVersion.indexOf('-') > 0) {
        buildJavaVersion = buildJavaVersion.substring(0, buildJavaVersion.indexOf('-'))
    }
    Integer.parseInt(buildJavaVersion)
}
int buildJavaVersion = getBuildJavaVersion()

def projectPom = {
    name = 'hermes'
    packaging = 'jar'
    description = 'High-performance and lightweight FIXP client API library.'

    url = 'https://github.com/vitor-tadashi/hermes'

    scm {
        connection = 'scm:git:https://github.com/vitor-tadashi/hermesgit'
        developerConnection = 'scm:git:https://github.com/vitor-tadashi/hermesy.git'
        url = 'https://github.com/vitor-tadashi/hermes.git'
    }

    licenses {
        license {
            name = 'The Apache License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            id = 'vitor-tadashi'
            name = 'Vitor Tadashi Uno Nishimura'
            email = 'vitor.tadashi@gmail.com'
            url = 'https://github.com/vitor-tadashi'
        }
    }
}

repositories{
    mavenCentral()
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    group = hermesGroup
    version = version

    def toolchainLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(buildJavaVersion)
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(buildJavaVersion)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    dependencies {
        implementation group: 'org.agrona', name: 'agrona', version: "${agronaVersion}"

        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: "${junitVersion}"
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junitVersion}"
        testRuntimeOnly "org.junit.platform:junit-platform-launcher"

        testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: "${mockitoVersion}"
        testImplementation group: 'org.mockito', name: 'mockito-core', version: "${mockitoVersion}"
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(buildJavaVersion)
        }
    }

    checkstyle.toolVersion = "${checkstyleVersion}"

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.deprecation = true
        options.compilerArgs.addAll(['-Xlint:all,-processing', '-Werror']) // Enable all warnings and treat them as errors
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()

        if (buildJavaVersion >= 9) {
            jvmArgs('--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED')
            jvmArgs('--add-opens', 'java.base/java.util.zip=ALL-UNNAMED')
        }

        if (buildJavaVersion >= 21) {
            jvmArgs('-XX:+EnableDynamicAgentLoading')
        }

        testClassesDirs = testing.suites.test.sources.output.classesDirs
        classpath = testing.suites.test.sources.runtimeClasspath

        testLogging {
            for (def level : LogLevel.values())
            {
                def testLogging = get(level)
                testLogging.exceptionFormat = 'full'
                testLogging.events = ["FAILED", "STANDARD_OUT", "STANDARD_ERROR"]
            }
        }

        systemProperties(
            'agrona.strict.alignment.checks': 'true',
            'java.net.preferIPv4Stack': 'true',
            'java.net.preferIPv6Addresses': 'false')

        javaLauncher.set(toolchainLauncher)
    }

    javadoc {
        failOnError false
        title = '<h1>Hermes</h1>'
        options.bottom = '<i>Copyright &#169; 2034-2024 Open FIXP. All Rights Reserved.</i>'
        options.encoding = 'UTF-8'
        options.docEncoding = 'UTF-8'
        options.charSet = 'UTF-8'
        options.links("https://www.javadoc.io/doc/org.agrona/agrona/${agronaVersion}/")

        if (buildJavaVersion > 21) { // early access JavaDoc location is different
            options.links("https://download.java.net/java/early_access/jdk${buildJavaVersion}/docs/api/")
        }
        else if (buildJavaVersion >= 11) {
            options.links("https://docs.oracle.com/en/java/javase/${buildJavaVersion}/docs/api/")
        }
        else {
            options.links("https://docs.oracle.com/javase/${buildJavaVersion}/docs/api/")
        }

        if (buildJavaVersion >= 10) {
            options.addBooleanOption 'html5', true
        }
    }

    tasks.withType(JavaExec).configureEach {
        javaLauncher.set(toolchainLauncher)
    }

    jar {
        manifest.attributes(
                'Implementation-Title': 'Hermes',
                'Implementation-Version': archiveVersion,
                'Implementation-Vendor': 'Open FIXP',
        )
    }

    configurations {
        tests
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }
}

tasks.withType(PublishToMavenRepository).configureEach {
    onlyIf {
        isReleaseVersion
    }
}

tasks.register('copyTestLogs', Copy) {
    from '.'
    include '**/build/test-output/**'
    include '**/*.log'
    include '**/*.tlog'
    include '**/build/reports/tests/**'
    include '**/build/test-results/**/*'
    include 'LICENSE'
    exclude 'build'
    into 'build/test_logs'

    includeEmptyDirs = false
}

tasks.register('tarTestLogs', Tar) {
    dependsOn tasks.named('copyTestLogs')
    archiveBaseName.set('test_logs')
    from 'build/test_logs'
    compression Compression.BZIP2
}

wrapper {
    gradleVersion = '8.6.0'
    distributionType = 'ALL'
}